namespace ApiStudioIO
{
    using Microsoft.VisualStudio.Modeling;
    using System.Collections.Generic;
    using System.Linq;

    internal static class HttpApiHeaderExtension
    {
        internal static HttpApi WithDefaultHeaders(this HttpApi httpApi)
        {
            ClearAutoGeneratedDefaults(httpApi);
            CreateDefaultResponseHeader(httpApi);

            return httpApi;
        }

        private static void ClearAutoGeneratedDefaults(HttpApi httpApi)
        {
            using (Transaction t = httpApi.Store.TransactionManager.BeginTransaction("HttpApiHeaderExtension.ClearAutoGeneratedDefaults"))
            {
                httpApi?.HttpApiHeaderRequests
                    .Where(x => x.IsAutoGenerated)
                    .ToList()
                    .ForEach(x => httpApi.HttpApiHeaderRequests.Remove(x));

                httpApi?.HttpApiHeaderResponses
                    .Where(x => x.IsAutoGenerated)
                    .ToList()
                    .ForEach(x => httpApi.HttpApiHeaderResponses.Remove(x));

                t.Commit();
            }
        }

        private static void CreateDefaultResponseHeader(HttpApi httpApi)
        {
            var managedList = new List<ApiStudioComponentHeaderResponse>();

            if (HttpResponseExtension.GetHttpResponseCodeDescription(httpApi.GetSuccessCode()) == "Created")      //201 should have a location to the created resource
            {
                managedList.Add(new ApiStudioComponentHeaderResponse
                {
                    Name = "Location",
                    Description = "Location of the newly created resource",
                    IsRequired = true,
                    AllowEmptyValue = false,
                    IsAutoGenerated = true,
                    IncludeOn = HttpApiHeaderResponseOnTypes.OnSuccess
                });
            }

            ApiStudioComponentTransactionManager.Save(httpApi, managedList);
        }
    }
}