namespace ApiStudioIO
{
    using Microsoft.VisualStudio.Modeling;
    using System;
    using System.Collections.Generic;
    using System.Linq;

    internal static class HttpApiResponseStatusCodeExtension
    {
        internal static HttpApi WithDefaultResponses(this HttpApi httpApi)
        {
            ClearAutoGeneratedDefaults(httpApi);
            CreateDefaults(httpApi);

            return httpApi;
        }

        private static void ClearAutoGeneratedDefaults(HttpApi httpApi)
        {
            using (Transaction t = httpApi.Store.TransactionManager.BeginTransaction("Saving ApiResponses"))
            {
                httpApi.HttpApiResponseStatusCodes
                    .Where(x => x.IsAutoGenerated)
                    .ToList()
                    .ForEach(x => httpApi.HttpApiResponseStatusCodes.Remove(x));
                t.Commit();
            }
        }

        private static void CreateDefaults(HttpApi httpApi)
        {
            var sourceResource = httpApi.Resourced.FirstOrDefault() ??
                                 throw new ArgumentNullException(nameof(httpApi.Resourced));

            var apiResponses = new List<ApiStudioComponentResponseStatusCode>();
            switch (httpApi)
            {
                case HttpApiGet _:
                    if (sourceResource is ResourceCollection
                        || sourceResource is ResourceInstance
                        || sourceResource is ResourceAttribute)
                    {
                        apiResponses.Add(200);
                        apiResponses.AddRange(CreateCommonApiResponse(httpApi));
                    }
                    break;

                case HttpApiPut _:
                    if (sourceResource is ResourceInstance
                        || sourceResource is ResourceAttribute)
                    {
                        apiResponses.Add(202);
                        if (httpApi.ApiStudio.ResponseCodesUnprocessable)
                        {
                            apiResponses.Add(422);  //[Unprocessable]
                        }

                        apiResponses.AddRange(CreateCommonApiResponse(httpApi));
                    }
                    break;

                case HttpApiPost _:
                    if (sourceResource is ResourceCollection
                        || sourceResource is ResourceAction)
                    {
                        apiResponses.Add(201);
                        if (httpApi.ApiStudio.ResponseCodesUnprocessable)
                        {
                            apiResponses.Add(422);  //[Unprocessable]
                        }

                        apiResponses.AddRange(CreateCommonApiResponse(httpApi));
                    }
                    break;

                case HttpApiDelete _:
                    if (sourceResource is ResourceInstance)
                    {
                        apiResponses.Add(202);
                        apiResponses.AddRange(CreateCommonApiResponse(httpApi));
                    }
                    break;
            }

            ApiStudioComponentTransactionManager.Save(httpApi, apiResponses);
        }

        private static List<ApiStudioComponentResponseStatusCode> CreateCommonApiResponse(HttpApi httpApi)
        {
            var apiResponses = new List<ApiStudioComponentResponseStatusCode>();

            if (httpApi.ApiStudio != null)
            {
                if (httpApi.ApiStudio.ResponseCodesBadRequest)
                {
                    apiResponses.Add(400);  //[Bad Request]
                }

                if (httpApi.ApiStudio.ResponseCodesSecurity)
                {
                    apiResponses.Add(401);  //[Unauthorised]
                    apiResponses.Add(403);  //[Forbidden]
                }

                if (httpApi.ApiStudio.ResponseCodesNotFound && HasDocumentResourceInPath(httpApi))
                {
                    apiResponses.Add(404);  //[Not found]
                }

                if (httpApi.ApiStudio.ResponseCodesNotAllowed)
                {
                    apiResponses.Add(405);  //[Not Allowed] Note: is valid but is enforce via Gateway
                }

                if (httpApi.ApiStudio.ResponseCodesUnsupportedMediaType)
                {
                    apiResponses.Add(415);  //[Unsupported Media Type]
                }

                if (httpApi.ApiStudio.ResponseCodesServerError)
                {
                    apiResponses.Add(500);  //[Internal Server error]
                }
            }
            return apiResponses;
        }

        //Check if the resource has a document in path e.g. the resource could not be found (404)
        private static bool HasDocumentResourceInPath(HttpApi httpApi)
        {
            var source = httpApi.Resourced.FirstOrDefault();
            while (source != null)
            {
                //break on the first document found
                if (source is ResourceInstance)
                {
                    return true;
                }

                source = source.SourceResource.FirstOrDefault();
            }
            return false;
        }
    }
}