//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace ApiStudioIO
{
	/// <summary>
	/// DomainRelationship ResourceReferencesResources
	/// Description for ApiStudioIO.ResourceReferencesResources
	/// </summary>
	[DslDesign::DisplayNameResource("ApiStudioIO.ResourceReferencesResources.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ApiStudioIO.ResourceReferencesResources.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ApiStudioIO.ApiStudioIODomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d11ce085-2df6-463c-bf92-9f80ee1c5400")]
	public partial class ResourceReferencesResources : DslModeling::ElementLink
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ResourceReferencesResources domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd11ce085, 0x2df6, 0x463c, 0xbf, 0x92, 0x9f, 0x80, 0xee, 0x1c, 0x54, 0x00);


		/// <summary>
		/// Constructor
		/// Creates a ResourceReferencesResources link in the same Partition as the given Resource
		/// </summary>
		/// <param name="source">Resource to use as the source of the relationship.</param>
		/// <param name="target">Resource to use as the target of the relationship.</param>
		public ResourceReferencesResources(Resource source, Resource target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ResourceReferencesResources.SourceResourceDomainRoleId, source), new DslModeling::RoleAssignment(ResourceReferencesResources.TargetResourceDomainRoleId, target)}, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceReferencesResources(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceReferencesResources(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceReferencesResources(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceReferencesResources(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceResource domain role code

		/// <summary>
		/// SourceResource domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceResourceDomainRoleId = new global::System.Guid(0xf52d4c33, 0x0f0b, 0x459b, 0x92, 0x72, 0x15, 0x3e, 0x2e, 0x28, 0x44, 0x91);

		/// <summary>
		/// DomainRole SourceResource
		/// Description for ApiStudioIO.ResourceReferencesResources.SourceResource
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.ResourceReferencesResources/SourceResource.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.ResourceReferencesResources/SourceResource.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Resources", PropertyDisplayNameKey="ApiStudioIO.ResourceReferencesResources/SourceResource.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f52d4c33-0f0b-459b-9272-153e2e284491")]
		public virtual Resource SourceResource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Resource)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceResourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceResourceDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access SourceResource of a Resource
		/// <summary>
		/// Gets a list of SourceResource.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Resource> GetSourceResource(Resource element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Resource>, Resource>(element, TargetResourceDomainRoleId);
		}
		#endregion
		#region TargetResource domain role code

		/// <summary>
		/// TargetResource domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetResourceDomainRoleId = new global::System.Guid(0xa7936b77, 0x5348, 0x49e3, 0x87, 0x09, 0x32, 0x67, 0x39, 0x3f, 0x42, 0x3c);

		/// <summary>
		/// DomainRole TargetResource
		/// Description for ApiStudioIO.ResourceReferencesResources.TargetResource
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.ResourceReferencesResources/TargetResource.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.ResourceReferencesResources/TargetResource.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceResource", PropertyDisplayNameKey="ApiStudioIO.ResourceReferencesResources/TargetResource.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a7936b77-5348-49e3-8709-3267393f423c")]
		public virtual Resource TargetResource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Resource)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetResourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetResourceDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access Resources of a Resource
		/// <summary>
		/// Gets a list of Resources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Resource> GetResources(Resource element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Resource>, Resource>(element, SourceResourceDomainRoleId);
		}
		#endregion
		#region SourceResource link accessor
		/// <summary>
		/// Get the list of ResourceReferencesResources links to a Resource.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.ResourceReferencesResources> GetLinksToResources ( global::ApiStudioIO.Resource sourceResourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.ResourceReferencesResources>(sourceResourceInstance, global::ApiStudioIO.ResourceReferencesResources.SourceResourceDomainRoleId);
		}
		#endregion
		#region TargetResource link accessor
		/// <summary>
		/// Get the list of ResourceReferencesResources links to a Resource.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.ResourceReferencesResources> GetLinksToSourceResource ( global::ApiStudioIO.Resource targetResourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.ResourceReferencesResources>(targetResourceInstance, global::ApiStudioIO.ResourceReferencesResources.TargetResourceDomainRoleId);
		}
		#endregion
		#region ResourceReferencesResources instance accessors

		/// <summary>
		/// Get any ResourceReferencesResources links between a given Resource and a Resource.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.ResourceReferencesResources> GetLinks( global::ApiStudioIO.Resource source, global::ApiStudioIO.Resource target )
		{
			global::System.Collections.Generic.List<global::ApiStudioIO.ResourceReferencesResources> outLinks = new global::System.Collections.Generic.List<global::ApiStudioIO.ResourceReferencesResources>();
			global::System.Collections.Generic.IList<global::ApiStudioIO.ResourceReferencesResources> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.ResourceReferencesResources>(source, global::ApiStudioIO.ResourceReferencesResources.SourceResourceDomainRoleId);
			foreach ( global::ApiStudioIO.ResourceReferencesResources link in links )
			{
				if ( target.Equals(link.TargetResource) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ResourceReferencesResources link between a given Resourceand a Resource.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.ResourceReferencesResources GetLink( global::ApiStudioIO.Resource source, global::ApiStudioIO.Resource target )
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.ResourceReferencesResources> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.ResourceReferencesResources>(source, global::ApiStudioIO.ResourceReferencesResources.SourceResourceDomainRoleId);
			foreach ( global::ApiStudioIO.ResourceReferencesResources link in links )
			{
				if ( target.Equals(link.TargetResource) )
				{
					return link;
				}
			}
			return null;
		}

		#endregion
	}
}
namespace ApiStudioIO
{
	/// <summary>
	/// DomainRelationship HttpApiSuccessRequestModel
	/// Description for ApiStudioIO.HttpApiSuccessRequestModel
	/// </summary>
	[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiSuccessRequestModel.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ApiStudioIO.HttpApiSuccessRequestModel.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ApiStudioIO.ApiStudioIODomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("3ee75ed1-a30e-4725-bb2d-5047960df433")]
	public partial class HttpApiSuccessRequestModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id

		/// <summary>
		/// HttpApiSuccessRequestModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3ee75ed1, 0xa30e, 0x4725, 0xbb, 0x2d, 0x50, 0x47, 0x96, 0x0d, 0xf4, 0x33);


		/// <summary>
		/// Constructor
		/// Creates a HttpApiSuccessRequestModel link in the same Partition as the given DataModel
		/// </summary>
		/// <param name="source">DataModel to use as the source of the relationship.</param>
		/// <param name="target">HttpApi to use as the target of the relationship.</param>
		public HttpApiSuccessRequestModel(DataModel source, HttpApi target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(HttpApiSuccessRequestModel.DataModelDomainRoleId, source), new DslModeling::RoleAssignment(HttpApiSuccessRequestModel.HttpApiDomainRoleId, target)}, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HttpApiSuccessRequestModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HttpApiSuccessRequestModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HttpApiSuccessRequestModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HttpApiSuccessRequestModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DataModel domain role code

		/// <summary>
		/// DataModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataModelDomainRoleId = new global::System.Guid(0x4dc78a61, 0xcfb1, 0x448f, 0xa8, 0xf2, 0x17, 0x77, 0xd4, 0x62, 0xa6, 0x97);

		/// <summary>
		/// DomainRole DataModel
		/// Description for ApiStudioIO.HttpApiSuccessRequestModel.DataModel
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiSuccessRequestModel/DataModel.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.HttpApiSuccessRequestModel/DataModel.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "HttpApis", PropertyDisplayNameKey="ApiStudioIO.HttpApiSuccessRequestModel/DataModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4dc78a61-cfb1-448f-a8f2-1777d462a697")]
		public virtual DataModel DataModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataModelDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access SourceDataModel of a HttpApi
		/// <summary>
		/// Gets a list of SourceDataModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DataModel> GetSourceDataModel(HttpApi element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DataModel>, DataModel>(element, HttpApiDomainRoleId);
		}
		#endregion
		#region HttpApi domain role code

		/// <summary>
		/// HttpApi domain role Id.
		/// </summary>
		public static readonly global::System.Guid HttpApiDomainRoleId = new global::System.Guid(0x9c8d4e57, 0xe887, 0x4e62, 0x96, 0x0b, 0x45, 0xa5, 0x91, 0x5f, 0xf6, 0x14);

		/// <summary>
		/// DomainRole HttpApi
		/// Description for ApiStudioIO.HttpApiSuccessRequestModel.HttpApi
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiSuccessRequestModel/HttpApi.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.HttpApiSuccessRequestModel/HttpApi.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceDataModel", PropertyDisplayNameKey="ApiStudioIO.HttpApiSuccessRequestModel/HttpApi.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9c8d4e57-e887-4e62-960b-45a5915ff614")]
		public virtual HttpApi HttpApi
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (HttpApi)DslModeling::DomainRoleInfo.GetRolePlayer(this, HttpApiDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, HttpApiDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access HttpApis of a DataModel
		/// <summary>
		/// Gets a list of HttpApis.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<HttpApi> GetHttpApis(DataModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<HttpApi>, HttpApi>(element, DataModelDomainRoleId);
		}
		#endregion
		#region DataModel link accessor
		/// <summary>
		/// Get the list of HttpApiSuccessRequestModel links to a DataModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.HttpApiSuccessRequestModel> GetLinksToHttpApis ( global::ApiStudioIO.DataModel dataModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiSuccessRequestModel>(dataModelInstance, global::ApiStudioIO.HttpApiSuccessRequestModel.DataModelDomainRoleId);
		}
		#endregion
		#region HttpApi link accessor
		/// <summary>
		/// Get the list of HttpApiSuccessRequestModel links to a HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.HttpApiSuccessRequestModel> GetLinksToSourceDataModel ( global::ApiStudioIO.HttpApi httpApiInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiSuccessRequestModel>(httpApiInstance, global::ApiStudioIO.HttpApiSuccessRequestModel.HttpApiDomainRoleId);
		}
		#endregion
		#region HttpApiSuccessRequestModel instance accessors

		/// <summary>
		/// Get any HttpApiSuccessRequestModel links between a given DataModel and a HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.HttpApiSuccessRequestModel> GetLinks( global::ApiStudioIO.DataModel source, global::ApiStudioIO.HttpApi target )
		{
			global::System.Collections.Generic.List<global::ApiStudioIO.HttpApiSuccessRequestModel> outLinks = new global::System.Collections.Generic.List<global::ApiStudioIO.HttpApiSuccessRequestModel>();
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiSuccessRequestModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiSuccessRequestModel>(source, global::ApiStudioIO.HttpApiSuccessRequestModel.DataModelDomainRoleId);
			foreach ( global::ApiStudioIO.HttpApiSuccessRequestModel link in links )
			{
				if ( target.Equals(link.HttpApi) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one HttpApiSuccessRequestModel link between a given DataModeland a HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.HttpApiSuccessRequestModel GetLink( global::ApiStudioIO.DataModel source, global::ApiStudioIO.HttpApi target )
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiSuccessRequestModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiSuccessRequestModel>(source, global::ApiStudioIO.HttpApiSuccessRequestModel.DataModelDomainRoleId);
			foreach ( global::ApiStudioIO.HttpApiSuccessRequestModel link in links )
			{
				if ( target.Equals(link.HttpApi) )
				{
					return link;
				}
			}
			return null;
		}

		#endregion
	}
}
namespace ApiStudioIO
{
	/// <summary>
	/// DomainRelationship HttpApiSuccessResponseModel
	/// Description for ApiStudioIO.HttpApiSuccessResponseModel
	/// </summary>
	[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiSuccessResponseModel.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ApiStudioIO.HttpApiSuccessResponseModel.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ApiStudioIO.ApiStudioIODomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("ba3ce080-e2ec-4347-97dc-69d3981e5aeb")]
	public partial class HttpApiSuccessResponseModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id

		/// <summary>
		/// HttpApiSuccessResponseModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xba3ce080, 0xe2ec, 0x4347, 0x97, 0xdc, 0x69, 0xd3, 0x98, 0x1e, 0x5a, 0xeb);


		/// <summary>
		/// Constructor
		/// Creates a HttpApiSuccessResponseModel link in the same Partition as the given HttpApi
		/// </summary>
		/// <param name="source">HttpApi to use as the source of the relationship.</param>
		/// <param name="target">DataModel to use as the target of the relationship.</param>
		public HttpApiSuccessResponseModel(HttpApi source, DataModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(HttpApiSuccessResponseModel.HttpApiDomainRoleId, source), new DslModeling::RoleAssignment(HttpApiSuccessResponseModel.DataModelDomainRoleId, target)}, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HttpApiSuccessResponseModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HttpApiSuccessResponseModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HttpApiSuccessResponseModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HttpApiSuccessResponseModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region HttpApi domain role code

		/// <summary>
		/// HttpApi domain role Id.
		/// </summary>
		public static readonly global::System.Guid HttpApiDomainRoleId = new global::System.Guid(0x2fc549d9, 0xb391, 0x4db7, 0xa9, 0xfe, 0xff, 0x72, 0x4e, 0x0d, 0xd6, 0x4a);

		/// <summary>
		/// DomainRole HttpApi
		/// Description for ApiStudioIO.HttpApiSuccessResponseModel.HttpApi
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiSuccessResponseModel/HttpApi.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.HttpApiSuccessResponseModel/HttpApi.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DataModels", PropertyDisplayNameKey="ApiStudioIO.HttpApiSuccessResponseModel/HttpApi.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2fc549d9-b391-4db7-a9fe-ff724e0dd64a")]
		public virtual HttpApi HttpApi
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (HttpApi)DslModeling::DomainRoleInfo.GetRolePlayer(this, HttpApiDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, HttpApiDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access SourceHttpApi of a DataModel
		/// <summary>
		/// Gets a list of SourceHttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<HttpApi> GetSourceHttpApi(DataModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<HttpApi>, HttpApi>(element, DataModelDomainRoleId);
		}
		#endregion
		#region DataModel domain role code

		/// <summary>
		/// DataModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataModelDomainRoleId = new global::System.Guid(0xdd37e82a, 0x905b, 0x499c, 0x8d, 0xdb, 0xba, 0x90, 0x12, 0xf3, 0xcd, 0x1f);

		/// <summary>
		/// DomainRole DataModel
		/// Description for ApiStudioIO.HttpApiSuccessResponseModel.DataModel
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiSuccessResponseModel/DataModel.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.HttpApiSuccessResponseModel/DataModel.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceHttpApi", PropertyDisplayNameKey="ApiStudioIO.HttpApiSuccessResponseModel/DataModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dd37e82a-905b-499c-8ddb-ba9012f3cd1f")]
		public virtual DataModel DataModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataModelDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access DataModels of a HttpApi
		/// <summary>
		/// Gets a list of DataModels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DataModel> GetDataModels(HttpApi element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DataModel>, DataModel>(element, HttpApiDomainRoleId);
		}
		#endregion
		#region HttpApi link accessor
		/// <summary>
		/// Get the list of HttpApiSuccessResponseModel links to a HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.HttpApiSuccessResponseModel> GetLinksToDataModels ( global::ApiStudioIO.HttpApi httpApiInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiSuccessResponseModel>(httpApiInstance, global::ApiStudioIO.HttpApiSuccessResponseModel.HttpApiDomainRoleId);
		}
		#endregion
		#region DataModel link accessor
		/// <summary>
		/// Get the list of HttpApiSuccessResponseModel links to a DataModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.HttpApiSuccessResponseModel> GetLinksToSourceHttpApi ( global::ApiStudioIO.DataModel dataModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiSuccessResponseModel>(dataModelInstance, global::ApiStudioIO.HttpApiSuccessResponseModel.DataModelDomainRoleId);
		}
		#endregion
		#region HttpApiSuccessResponseModel instance accessors

		/// <summary>
		/// Get any HttpApiSuccessResponseModel links between a given HttpApi and a DataModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.HttpApiSuccessResponseModel> GetLinks( global::ApiStudioIO.HttpApi source, global::ApiStudioIO.DataModel target )
		{
			global::System.Collections.Generic.List<global::ApiStudioIO.HttpApiSuccessResponseModel> outLinks = new global::System.Collections.Generic.List<global::ApiStudioIO.HttpApiSuccessResponseModel>();
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiSuccessResponseModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiSuccessResponseModel>(source, global::ApiStudioIO.HttpApiSuccessResponseModel.HttpApiDomainRoleId);
			foreach ( global::ApiStudioIO.HttpApiSuccessResponseModel link in links )
			{
				if ( target.Equals(link.DataModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one HttpApiSuccessResponseModel link between a given HttpApiand a DataModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.HttpApiSuccessResponseModel GetLink( global::ApiStudioIO.HttpApi source, global::ApiStudioIO.DataModel target )
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiSuccessResponseModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiSuccessResponseModel>(source, global::ApiStudioIO.HttpApiSuccessResponseModel.HttpApiDomainRoleId);
			foreach ( global::ApiStudioIO.HttpApiSuccessResponseModel link in links )
			{
				if ( target.Equals(link.DataModel) )
				{
					return link;
				}
			}
			return null;
		}

		#endregion
	}
}
namespace ApiStudioIO
{
	/// <summary>
	/// DomainRelationship HttpApiHasParameters
	/// Description for ApiStudioIO.HttpApiHasParameters
	/// </summary>
	[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiHasParameters.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ApiStudioIO.HttpApiHasParameters.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ApiStudioIO.ApiStudioIODomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("fa7d2f8c-1e77-4a66-9912-d8204ac208f3")]
	public partial class HttpApiHasParameters : DslModeling::ElementLink
	{
		#region Constructors, domain class Id

		/// <summary>
		/// HttpApiHasParameters domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfa7d2f8c, 0x1e77, 0x4a66, 0x99, 0x12, 0xd8, 0x20, 0x4a, 0xc2, 0x08, 0xf3);


		/// <summary>
		/// Constructor
		/// Creates a HttpApiHasParameters link in the same Partition as the given HttpApi
		/// </summary>
		/// <param name="source">HttpApi to use as the source of the relationship.</param>
		/// <param name="target">HttpApiParameter to use as the target of the relationship.</param>
		public HttpApiHasParameters(HttpApi source, HttpApiParameter target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(HttpApiHasParameters.HttpApiDomainRoleId, source), new DslModeling::RoleAssignment(HttpApiHasParameters.HttpApiParameterDomainRoleId, target)}, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HttpApiHasParameters(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HttpApiHasParameters(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HttpApiHasParameters(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HttpApiHasParameters(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region HttpApi domain role code

		/// <summary>
		/// HttpApi domain role Id.
		/// </summary>
		public static readonly global::System.Guid HttpApiDomainRoleId = new global::System.Guid(0x5f9c4b56, 0x75da, 0x4390, 0xbf, 0x67, 0x2a, 0xb3, 0x59, 0xda, 0x36, 0xff);

		/// <summary>
		/// DomainRole HttpApi
		/// Description for ApiStudioIO.HttpApiHasParameters.HttpApi
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiHasParameters/HttpApi.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.HttpApiHasParameters/HttpApi.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "HttpApiParameters", PropertyDisplayNameKey="ApiStudioIO.HttpApiHasParameters/HttpApi.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5f9c4b56-75da-4390-bf67-2ab359da36ff")]
		public virtual HttpApi HttpApi
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (HttpApi)DslModeling::DomainRoleInfo.GetRolePlayer(this, HttpApiDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, HttpApiDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access HttpApi of a HttpApiParameter
		/// <summary>
		/// Gets HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static HttpApi GetHttpApi(HttpApiParameter element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, HttpApiParameterDomainRoleId) as HttpApi;
		}

		/// <summary>
		/// Sets HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetHttpApi(HttpApiParameter element, HttpApi newHttpApi)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, HttpApiParameterDomainRoleId, newHttpApi);
		}
		#endregion
		#region HttpApiParameter domain role code

		/// <summary>
		/// HttpApiParameter domain role Id.
		/// </summary>
		public static readonly global::System.Guid HttpApiParameterDomainRoleId = new global::System.Guid(0x4e1f0e00, 0xe8d5, 0x4f7d, 0x82, 0x62, 0x22, 0x34, 0x51, 0xe9, 0x43, 0x93);

		/// <summary>
		/// DomainRole HttpApiParameter
		/// Description for ApiStudioIO.HttpApiHasParameters.HttpApiParameter
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiHasParameters/HttpApiParameter.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.HttpApiHasParameters/HttpApiParameter.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "HttpApi", PropertyDisplayNameKey="ApiStudioIO.HttpApiHasParameters/HttpApiParameter.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4e1f0e00-e8d5-4f7d-8262-223451e94393")]
		public virtual HttpApiParameter HttpApiParameter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (HttpApiParameter)DslModeling::DomainRoleInfo.GetRolePlayer(this, HttpApiParameterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, HttpApiParameterDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access HttpApiParameters of a HttpApi
		/// <summary>
		/// Gets a list of HttpApiParameters.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<HttpApiParameter> GetHttpApiParameters(HttpApi element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<HttpApiParameter>, HttpApiParameter>(element, HttpApiDomainRoleId);
		}
		#endregion
		#region HttpApi link accessor
		/// <summary>
		/// Get the list of HttpApiHasParameters links to a HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.HttpApiHasParameters> GetLinksToHttpApiParameters ( global::ApiStudioIO.HttpApi httpApiInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasParameters>(httpApiInstance, global::ApiStudioIO.HttpApiHasParameters.HttpApiDomainRoleId);
		}
		#endregion
		#region HttpApiParameter link accessor
		/// <summary>
		/// Get the HttpApiHasParameters link to a HttpApiParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.HttpApiHasParameters GetLinkToHttpApi (global::ApiStudioIO.HttpApiParameter httpApiParameterInstance)
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiHasParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasParameters>(httpApiParameterInstance, global::ApiStudioIO.HttpApiHasParameters.HttpApiParameterDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of HttpApiParameter not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region HttpApiHasParameters instance accessors

		/// <summary>
		/// Get any HttpApiHasParameters links between a given HttpApi and a HttpApiParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.HttpApiHasParameters> GetLinks( global::ApiStudioIO.HttpApi source, global::ApiStudioIO.HttpApiParameter target )
		{
			global::System.Collections.Generic.List<global::ApiStudioIO.HttpApiHasParameters> outLinks = new global::System.Collections.Generic.List<global::ApiStudioIO.HttpApiHasParameters>();
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiHasParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasParameters>(source, global::ApiStudioIO.HttpApiHasParameters.HttpApiDomainRoleId);
			foreach ( global::ApiStudioIO.HttpApiHasParameters link in links )
			{
				if ( target.Equals(link.HttpApiParameter) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one HttpApiHasParameters link between a given HttpApiand a HttpApiParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.HttpApiHasParameters GetLink( global::ApiStudioIO.HttpApi source, global::ApiStudioIO.HttpApiParameter target )
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiHasParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasParameters>(source, global::ApiStudioIO.HttpApiHasParameters.HttpApiDomainRoleId);
			foreach ( global::ApiStudioIO.HttpApiHasParameters link in links )
			{
				if ( target.Equals(link.HttpApiParameter) )
				{
					return link;
				}
			}
			return null;
		}

		#endregion
	}
}
namespace ApiStudioIO
{
	/// <summary>
	/// DomainRelationship HttpApiHasResponseStatusCodes
	/// Description for ApiStudioIO.HttpApiHasResponseStatusCodes
	/// </summary>
	[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiHasResponseStatusCodes.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ApiStudioIO.HttpApiHasResponseStatusCodes.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ApiStudioIO.ApiStudioIODomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8a692ff9-dcc7-414f-9ac9-5265fe4ec202")]
	public partial class HttpApiHasResponseStatusCodes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id

		/// <summary>
		/// HttpApiHasResponseStatusCodes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8a692ff9, 0xdcc7, 0x414f, 0x9a, 0xc9, 0x52, 0x65, 0xfe, 0x4e, 0xc2, 0x02);


		/// <summary>
		/// Constructor
		/// Creates a HttpApiHasResponseStatusCodes link in the same Partition as the given HttpApi
		/// </summary>
		/// <param name="source">HttpApi to use as the source of the relationship.</param>
		/// <param name="target">HttpApiResponseStatusCode to use as the target of the relationship.</param>
		public HttpApiHasResponseStatusCodes(HttpApi source, HttpApiResponseStatusCode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(HttpApiHasResponseStatusCodes.HttpApiDomainRoleId, source), new DslModeling::RoleAssignment(HttpApiHasResponseStatusCodes.HttpApiResponseStatusCodeDomainRoleId, target)}, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HttpApiHasResponseStatusCodes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HttpApiHasResponseStatusCodes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HttpApiHasResponseStatusCodes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HttpApiHasResponseStatusCodes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region HttpApi domain role code

		/// <summary>
		/// HttpApi domain role Id.
		/// </summary>
		public static readonly global::System.Guid HttpApiDomainRoleId = new global::System.Guid(0x2fe627a6, 0x9b2e, 0x4742, 0x8b, 0xd1, 0x94, 0xf2, 0x13, 0x8e, 0x07, 0xf8);

		/// <summary>
		/// DomainRole HttpApi
		/// Description for ApiStudioIO.HttpApiHasResponseStatusCodes.HttpApi
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiHasResponseStatusCodes/HttpApi.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.HttpApiHasResponseStatusCodes/HttpApi.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "HttpApiResponseStatusCodes", PropertyDisplayNameKey="ApiStudioIO.HttpApiHasResponseStatusCodes/HttpApi.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2fe627a6-9b2e-4742-8bd1-94f2138e07f8")]
		public virtual HttpApi HttpApi
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (HttpApi)DslModeling::DomainRoleInfo.GetRolePlayer(this, HttpApiDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, HttpApiDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access HttpApi of a HttpApiResponseStatusCode
		/// <summary>
		/// Gets HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static HttpApi GetHttpApi(HttpApiResponseStatusCode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, HttpApiResponseStatusCodeDomainRoleId) as HttpApi;
		}

		/// <summary>
		/// Sets HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetHttpApi(HttpApiResponseStatusCode element, HttpApi newHttpApi)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, HttpApiResponseStatusCodeDomainRoleId, newHttpApi);
		}
		#endregion
		#region HttpApiResponseStatusCode domain role code

		/// <summary>
		/// HttpApiResponseStatusCode domain role Id.
		/// </summary>
		public static readonly global::System.Guid HttpApiResponseStatusCodeDomainRoleId = new global::System.Guid(0x5c236289, 0x865f, 0x4407, 0x8d, 0x55, 0x47, 0x46, 0x18, 0xec, 0x4a, 0xc2);

		/// <summary>
		/// DomainRole HttpApiResponseStatusCode
		/// Description for
		/// ApiStudioIO.HttpApiHasResponseStatusCodes.HttpApiResponseStatusCode
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiHasResponseStatusCodes/HttpApiResponseStatusCode.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.HttpApiHasResponseStatusCodes/HttpApiResponseStatusCode.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "HttpApi", PropertyDisplayNameKey="ApiStudioIO.HttpApiHasResponseStatusCodes/HttpApiResponseStatusCode.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5c236289-865f-4407-8d55-474618ec4ac2")]
		public virtual HttpApiResponseStatusCode HttpApiResponseStatusCode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (HttpApiResponseStatusCode)DslModeling::DomainRoleInfo.GetRolePlayer(this, HttpApiResponseStatusCodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, HttpApiResponseStatusCodeDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access HttpApiResponseStatusCodes of a HttpApi
		/// <summary>
		/// Gets a list of HttpApiResponseStatusCodes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<HttpApiResponseStatusCode> GetHttpApiResponseStatusCodes(HttpApi element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<HttpApiResponseStatusCode>, HttpApiResponseStatusCode>(element, HttpApiDomainRoleId);
		}
		#endregion
		#region HttpApi link accessor
		/// <summary>
		/// Get the list of HttpApiHasResponseStatusCodes links to a HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.HttpApiHasResponseStatusCodes> GetLinksToHttpApiResponseStatusCodes ( global::ApiStudioIO.HttpApi httpApiInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasResponseStatusCodes>(httpApiInstance, global::ApiStudioIO.HttpApiHasResponseStatusCodes.HttpApiDomainRoleId);
		}
		#endregion
		#region HttpApiResponseStatusCode link accessor
		/// <summary>
		/// Get the HttpApiHasResponseStatusCodes link to a HttpApiResponseStatusCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.HttpApiHasResponseStatusCodes GetLinkToHttpApi (global::ApiStudioIO.HttpApiResponseStatusCode httpApiResponseStatusCodeInstance)
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiHasResponseStatusCodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasResponseStatusCodes>(httpApiResponseStatusCodeInstance, global::ApiStudioIO.HttpApiHasResponseStatusCodes.HttpApiResponseStatusCodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of HttpApiResponseStatusCode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region HttpApiHasResponseStatusCodes instance accessors

		/// <summary>
		/// Get any HttpApiHasResponseStatusCodes links between a given HttpApi and a HttpApiResponseStatusCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.HttpApiHasResponseStatusCodes> GetLinks( global::ApiStudioIO.HttpApi source, global::ApiStudioIO.HttpApiResponseStatusCode target )
		{
			global::System.Collections.Generic.List<global::ApiStudioIO.HttpApiHasResponseStatusCodes> outLinks = new global::System.Collections.Generic.List<global::ApiStudioIO.HttpApiHasResponseStatusCodes>();
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiHasResponseStatusCodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasResponseStatusCodes>(source, global::ApiStudioIO.HttpApiHasResponseStatusCodes.HttpApiDomainRoleId);
			foreach ( global::ApiStudioIO.HttpApiHasResponseStatusCodes link in links )
			{
				if ( target.Equals(link.HttpApiResponseStatusCode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one HttpApiHasResponseStatusCodes link between a given HttpApiand a HttpApiResponseStatusCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.HttpApiHasResponseStatusCodes GetLink( global::ApiStudioIO.HttpApi source, global::ApiStudioIO.HttpApiResponseStatusCode target )
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiHasResponseStatusCodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasResponseStatusCodes>(source, global::ApiStudioIO.HttpApiHasResponseStatusCodes.HttpApiDomainRoleId);
			foreach ( global::ApiStudioIO.HttpApiHasResponseStatusCodes link in links )
			{
				if ( target.Equals(link.HttpApiResponseStatusCode) )
				{
					return link;
				}
			}
			return null;
		}

		#endregion
	}
}
namespace ApiStudioIO
{
	/// <summary>
	/// DomainRelationship HttpApiHasMediaTypeResponse
	/// Description for ApiStudioIO.HttpApiHasMediaTypeResponse
	/// </summary>
	[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiHasMediaTypeResponse.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ApiStudioIO.HttpApiHasMediaTypeResponse.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ApiStudioIO.ApiStudioIODomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a9ffebca-8f26-4d5e-a3ea-d1bd234ff860")]
	public partial class HttpApiHasMediaTypeResponse : DslModeling::ElementLink
	{
		#region Constructors, domain class Id

		/// <summary>
		/// HttpApiHasMediaTypeResponse domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa9ffebca, 0x8f26, 0x4d5e, 0xa3, 0xea, 0xd1, 0xbd, 0x23, 0x4f, 0xf8, 0x60);


		/// <summary>
		/// Constructor
		/// Creates a HttpApiHasMediaTypeResponse link in the same Partition as the given HttpApi
		/// </summary>
		/// <param name="source">HttpApi to use as the source of the relationship.</param>
		/// <param name="target">HttpApiMediaTypeResponse to use as the target of the relationship.</param>
		public HttpApiHasMediaTypeResponse(HttpApi source, HttpApiMediaTypeResponse target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(HttpApiHasMediaTypeResponse.HttpApiDomainRoleId, source), new DslModeling::RoleAssignment(HttpApiHasMediaTypeResponse.HttpApiMediaTypeResponseDomainRoleId, target)}, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HttpApiHasMediaTypeResponse(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HttpApiHasMediaTypeResponse(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HttpApiHasMediaTypeResponse(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HttpApiHasMediaTypeResponse(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region HttpApi domain role code

		/// <summary>
		/// HttpApi domain role Id.
		/// </summary>
		public static readonly global::System.Guid HttpApiDomainRoleId = new global::System.Guid(0xd3665080, 0xf49b, 0x45dd, 0xaf, 0x8c, 0x0a, 0xfa, 0x9b, 0xcf, 0x21, 0x9b);

		/// <summary>
		/// DomainRole HttpApi
		/// Description for ApiStudioIO.HttpApiHasMediaTypeResponse.HttpApi
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiHasMediaTypeResponse/HttpApi.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.HttpApiHasMediaTypeResponse/HttpApi.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "HttpApiMediaTypeResponsed", PropertyDisplayNameKey="ApiStudioIO.HttpApiHasMediaTypeResponse/HttpApi.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d3665080-f49b-45dd-af8c-0afa9bcf219b")]
		public virtual HttpApi HttpApi
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (HttpApi)DslModeling::DomainRoleInfo.GetRolePlayer(this, HttpApiDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, HttpApiDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access HttpApi of a HttpApiMediaTypeResponse
		/// <summary>
		/// Gets HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static HttpApi GetHttpApi(HttpApiMediaTypeResponse element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, HttpApiMediaTypeResponseDomainRoleId) as HttpApi;
		}

		/// <summary>
		/// Sets HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetHttpApi(HttpApiMediaTypeResponse element, HttpApi newHttpApi)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, HttpApiMediaTypeResponseDomainRoleId, newHttpApi);
		}
		#endregion
		#region HttpApiMediaTypeResponse domain role code

		/// <summary>
		/// HttpApiMediaTypeResponse domain role Id.
		/// </summary>
		public static readonly global::System.Guid HttpApiMediaTypeResponseDomainRoleId = new global::System.Guid(0x66478424, 0x605c, 0x45dd, 0xb8, 0xda, 0xcc, 0x74, 0x8d, 0x5a, 0x8f, 0xf8);

		/// <summary>
		/// DomainRole HttpApiMediaTypeResponse
		/// Description for ApiStudioIO.HttpApiHasMediaTypeResponse.HttpApiMediaTypeResponse
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiHasMediaTypeResponse/HttpApiMediaTypeResponse.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.HttpApiHasMediaTypeResponse/HttpApiMediaTypeResponse.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "HttpApi", PropertyDisplayNameKey="ApiStudioIO.HttpApiHasMediaTypeResponse/HttpApiMediaTypeResponse.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("66478424-605c-45dd-b8da-cc748d5a8ff8")]
		public virtual HttpApiMediaTypeResponse HttpApiMediaTypeResponse
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (HttpApiMediaTypeResponse)DslModeling::DomainRoleInfo.GetRolePlayer(this, HttpApiMediaTypeResponseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, HttpApiMediaTypeResponseDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access HttpApiMediaTypeResponsed of a HttpApi
		/// <summary>
		/// Gets a list of HttpApiMediaTypeResponsed.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<HttpApiMediaTypeResponse> GetHttpApiMediaTypeResponsed(HttpApi element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<HttpApiMediaTypeResponse>, HttpApiMediaTypeResponse>(element, HttpApiDomainRoleId);
		}
		#endregion
		#region HttpApi link accessor
		/// <summary>
		/// Get the list of HttpApiHasMediaTypeResponse links to a HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.HttpApiHasMediaTypeResponse> GetLinksToHttpApiMediaTypeResponsed ( global::ApiStudioIO.HttpApi httpApiInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasMediaTypeResponse>(httpApiInstance, global::ApiStudioIO.HttpApiHasMediaTypeResponse.HttpApiDomainRoleId);
		}
		#endregion
		#region HttpApiMediaTypeResponse link accessor
		/// <summary>
		/// Get the HttpApiHasMediaTypeResponse link to a HttpApiMediaTypeResponse.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.HttpApiHasMediaTypeResponse GetLinkToHttpApi (global::ApiStudioIO.HttpApiMediaTypeResponse httpApiMediaTypeResponseInstance)
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiHasMediaTypeResponse> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasMediaTypeResponse>(httpApiMediaTypeResponseInstance, global::ApiStudioIO.HttpApiHasMediaTypeResponse.HttpApiMediaTypeResponseDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of HttpApiMediaTypeResponse not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region HttpApiHasMediaTypeResponse instance accessors

		/// <summary>
		/// Get any HttpApiHasMediaTypeResponse links between a given HttpApi and a HttpApiMediaTypeResponse.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.HttpApiHasMediaTypeResponse> GetLinks( global::ApiStudioIO.HttpApi source, global::ApiStudioIO.HttpApiMediaTypeResponse target )
		{
			global::System.Collections.Generic.List<global::ApiStudioIO.HttpApiHasMediaTypeResponse> outLinks = new global::System.Collections.Generic.List<global::ApiStudioIO.HttpApiHasMediaTypeResponse>();
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiHasMediaTypeResponse> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasMediaTypeResponse>(source, global::ApiStudioIO.HttpApiHasMediaTypeResponse.HttpApiDomainRoleId);
			foreach ( global::ApiStudioIO.HttpApiHasMediaTypeResponse link in links )
			{
				if ( target.Equals(link.HttpApiMediaTypeResponse) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one HttpApiHasMediaTypeResponse link between a given HttpApiand a HttpApiMediaTypeResponse.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.HttpApiHasMediaTypeResponse GetLink( global::ApiStudioIO.HttpApi source, global::ApiStudioIO.HttpApiMediaTypeResponse target )
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiHasMediaTypeResponse> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasMediaTypeResponse>(source, global::ApiStudioIO.HttpApiHasMediaTypeResponse.HttpApiDomainRoleId);
			foreach ( global::ApiStudioIO.HttpApiHasMediaTypeResponse link in links )
			{
				if ( target.Equals(link.HttpApiMediaTypeResponse) )
				{
					return link;
				}
			}
			return null;
		}

		#endregion
	}
}
namespace ApiStudioIO
{
	/// <summary>
	/// DomainRelationship HttpApiHasMediaTypeRequest
	/// Description for ApiStudioIO.HttpApiHasMediaTypeRequest
	/// </summary>
	[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiHasMediaTypeRequest.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ApiStudioIO.HttpApiHasMediaTypeRequest.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ApiStudioIO.ApiStudioIODomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d744ca70-d39c-4204-9fda-8281a96d13e2")]
	public partial class HttpApiHasMediaTypeRequest : DslModeling::ElementLink
	{
		#region Constructors, domain class Id

		/// <summary>
		/// HttpApiHasMediaTypeRequest domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd744ca70, 0xd39c, 0x4204, 0x9f, 0xda, 0x82, 0x81, 0xa9, 0x6d, 0x13, 0xe2);


		/// <summary>
		/// Constructor
		/// Creates a HttpApiHasMediaTypeRequest link in the same Partition as the given HttpApi
		/// </summary>
		/// <param name="source">HttpApi to use as the source of the relationship.</param>
		/// <param name="target">HttpApiMediaTypeRequest to use as the target of the relationship.</param>
		public HttpApiHasMediaTypeRequest(HttpApi source, HttpApiMediaTypeRequest target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(HttpApiHasMediaTypeRequest.HttpApiDomainRoleId, source), new DslModeling::RoleAssignment(HttpApiHasMediaTypeRequest.HttpApiMediaTypeRequestDomainRoleId, target)}, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HttpApiHasMediaTypeRequest(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HttpApiHasMediaTypeRequest(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HttpApiHasMediaTypeRequest(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HttpApiHasMediaTypeRequest(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region HttpApi domain role code

		/// <summary>
		/// HttpApi domain role Id.
		/// </summary>
		public static readonly global::System.Guid HttpApiDomainRoleId = new global::System.Guid(0x6eae1b8f, 0xab94, 0x4b52, 0x85, 0xf9, 0x4a, 0x4a, 0x48, 0x42, 0xa9, 0xfe);

		/// <summary>
		/// DomainRole HttpApi
		/// Description for ApiStudioIO.HttpApiHasMediaTypeRequest.HttpApi
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiHasMediaTypeRequest/HttpApi.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.HttpApiHasMediaTypeRequest/HttpApi.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "HttpApiMediaTypeRequest", PropertyDisplayNameKey="ApiStudioIO.HttpApiHasMediaTypeRequest/HttpApi.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6eae1b8f-ab94-4b52-85f9-4a4a4842a9fe")]
		public virtual HttpApi HttpApi
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (HttpApi)DslModeling::DomainRoleInfo.GetRolePlayer(this, HttpApiDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, HttpApiDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access HttpApi of a HttpApiMediaTypeRequest
		/// <summary>
		/// Gets HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static HttpApi GetHttpApi(HttpApiMediaTypeRequest element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, HttpApiMediaTypeRequestDomainRoleId) as HttpApi;
		}

		/// <summary>
		/// Sets HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetHttpApi(HttpApiMediaTypeRequest element, HttpApi newHttpApi)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, HttpApiMediaTypeRequestDomainRoleId, newHttpApi);
		}
		#endregion
		#region HttpApiMediaTypeRequest domain role code

		/// <summary>
		/// HttpApiMediaTypeRequest domain role Id.
		/// </summary>
		public static readonly global::System.Guid HttpApiMediaTypeRequestDomainRoleId = new global::System.Guid(0x38e764b1, 0xd576, 0x4e3c, 0x9d, 0xb9, 0xe2, 0x47, 0x26, 0xa3, 0xfc, 0x35);

		/// <summary>
		/// DomainRole HttpApiMediaTypeRequest
		/// Description for ApiStudioIO.HttpApiHasMediaTypeRequest.HttpApiMediaTypeRequest
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiHasMediaTypeRequest/HttpApiMediaTypeRequest.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.HttpApiHasMediaTypeRequest/HttpApiMediaTypeRequest.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "HttpApi", PropertyDisplayNameKey="ApiStudioIO.HttpApiHasMediaTypeRequest/HttpApiMediaTypeRequest.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("38e764b1-d576-4e3c-9db9-e24726a3fc35")]
		public virtual HttpApiMediaTypeRequest HttpApiMediaTypeRequest
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (HttpApiMediaTypeRequest)DslModeling::DomainRoleInfo.GetRolePlayer(this, HttpApiMediaTypeRequestDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, HttpApiMediaTypeRequestDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access HttpApiMediaTypeRequest of a HttpApi
		/// <summary>
		/// Gets a list of HttpApiMediaTypeRequest.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<HttpApiMediaTypeRequest> GetHttpApiMediaTypeRequest(HttpApi element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<HttpApiMediaTypeRequest>, HttpApiMediaTypeRequest>(element, HttpApiDomainRoleId);
		}
		#endregion
		#region HttpApi link accessor
		/// <summary>
		/// Get the list of HttpApiHasMediaTypeRequest links to a HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.HttpApiHasMediaTypeRequest> GetLinksToHttpApiMediaTypeRequest ( global::ApiStudioIO.HttpApi httpApiInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasMediaTypeRequest>(httpApiInstance, global::ApiStudioIO.HttpApiHasMediaTypeRequest.HttpApiDomainRoleId);
		}
		#endregion
		#region HttpApiMediaTypeRequest link accessor
		/// <summary>
		/// Get the HttpApiHasMediaTypeRequest link to a HttpApiMediaTypeRequest.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.HttpApiHasMediaTypeRequest GetLinkToHttpApi (global::ApiStudioIO.HttpApiMediaTypeRequest httpApiMediaTypeRequestInstance)
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiHasMediaTypeRequest> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasMediaTypeRequest>(httpApiMediaTypeRequestInstance, global::ApiStudioIO.HttpApiHasMediaTypeRequest.HttpApiMediaTypeRequestDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of HttpApiMediaTypeRequest not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region HttpApiHasMediaTypeRequest instance accessors

		/// <summary>
		/// Get any HttpApiHasMediaTypeRequest links between a given HttpApi and a HttpApiMediaTypeRequest.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.HttpApiHasMediaTypeRequest> GetLinks( global::ApiStudioIO.HttpApi source, global::ApiStudioIO.HttpApiMediaTypeRequest target )
		{
			global::System.Collections.Generic.List<global::ApiStudioIO.HttpApiHasMediaTypeRequest> outLinks = new global::System.Collections.Generic.List<global::ApiStudioIO.HttpApiHasMediaTypeRequest>();
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiHasMediaTypeRequest> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasMediaTypeRequest>(source, global::ApiStudioIO.HttpApiHasMediaTypeRequest.HttpApiDomainRoleId);
			foreach ( global::ApiStudioIO.HttpApiHasMediaTypeRequest link in links )
			{
				if ( target.Equals(link.HttpApiMediaTypeRequest) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one HttpApiHasMediaTypeRequest link between a given HttpApiand a HttpApiMediaTypeRequest.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.HttpApiHasMediaTypeRequest GetLink( global::ApiStudioIO.HttpApi source, global::ApiStudioIO.HttpApiMediaTypeRequest target )
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiHasMediaTypeRequest> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasMediaTypeRequest>(source, global::ApiStudioIO.HttpApiHasMediaTypeRequest.HttpApiDomainRoleId);
			foreach ( global::ApiStudioIO.HttpApiHasMediaTypeRequest link in links )
			{
				if ( target.Equals(link.HttpApiMediaTypeRequest) )
				{
					return link;
				}
			}
			return null;
		}

		#endregion
	}
}
namespace ApiStudioIO
{
	/// <summary>
	/// DomainRelationship ResourceReferencesApis
	/// Description for ApiStudioIO.ResourceReferencesApis
	/// </summary>
	[DslDesign::DisplayNameResource("ApiStudioIO.ResourceReferencesApis.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ApiStudioIO.ResourceReferencesApis.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ApiStudioIO.ApiStudioIODomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("97a03524-ddf1-462d-8aa1-3b991a119608")]
	public partial class ResourceReferencesApis : DslModeling::ElementLink
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ResourceReferencesApis domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x97a03524, 0xddf1, 0x462d, 0x8a, 0xa1, 0x3b, 0x99, 0x1a, 0x11, 0x96, 0x08);


		/// <summary>
		/// Constructor
		/// Creates a ResourceReferencesApis link in the same Partition as the given Resource
		/// </summary>
		/// <param name="source">Resource to use as the source of the relationship.</param>
		/// <param name="target">Api to use as the target of the relationship.</param>
		public ResourceReferencesApis(Resource source, Api target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ResourceReferencesApis.ResourceDomainRoleId, source), new DslModeling::RoleAssignment(ResourceReferencesApis.ApiDomainRoleId, target)}, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceReferencesApis(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceReferencesApis(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceReferencesApis(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceReferencesApis(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Resource domain role code

		/// <summary>
		/// Resource domain role Id.
		/// </summary>
		public static readonly global::System.Guid ResourceDomainRoleId = new global::System.Guid(0x78f75c24, 0x4b0d, 0x40cc, 0xa1, 0xbd, 0xbb, 0x9d, 0x1d, 0x31, 0xca, 0x85);

		/// <summary>
		/// DomainRole Resource
		/// Description for ApiStudioIO.ResourceReferencesApis.Resource
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.ResourceReferencesApis/Resource.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.ResourceReferencesApis/Resource.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Apis", PropertyDisplayNameKey="ApiStudioIO.ResourceReferencesApis/Resource.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("78f75c24-4b0d-40cc-a1bd-bb9d1d31ca85")]
		public virtual Resource Resource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Resource)DslModeling::DomainRoleInfo.GetRolePlayer(this, ResourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ResourceDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access Resourced of a Api
		/// <summary>
		/// Gets a list of Resourced.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Resource> GetResourced(Api element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Resource>, Resource>(element, ApiDomainRoleId);
		}
		#endregion
		#region Api domain role code

		/// <summary>
		/// Api domain role Id.
		/// </summary>
		public static readonly global::System.Guid ApiDomainRoleId = new global::System.Guid(0xc23208d4, 0x9cbf, 0x4c86, 0xbf, 0x4c, 0x89, 0x6d, 0x2f, 0xb1, 0x53, 0xd0);

		/// <summary>
		/// DomainRole Api
		/// Description for ApiStudioIO.ResourceReferencesApis.Api
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.ResourceReferencesApis/Api.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.ResourceReferencesApis/Api.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Resourced", PropertyDisplayNameKey="ApiStudioIO.ResourceReferencesApis/Api.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c23208d4-9cbf-4c86-bf4c-896d2fb153d0")]
		public virtual Api Api
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Api)DslModeling::DomainRoleInfo.GetRolePlayer(this, ApiDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ApiDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access Apis of a Resource
		/// <summary>
		/// Gets a list of Apis.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Api> GetApis(Resource element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Api>, Api>(element, ResourceDomainRoleId);
		}
		#endregion
		#region Resource link accessor
		/// <summary>
		/// Get the list of ResourceReferencesApis links to a Resource.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.ResourceReferencesApis> GetLinksToApis ( global::ApiStudioIO.Resource resourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.ResourceReferencesApis>(resourceInstance, global::ApiStudioIO.ResourceReferencesApis.ResourceDomainRoleId);
		}
		#endregion
		#region Api link accessor
		/// <summary>
		/// Get the list of ResourceReferencesApis links to a Api.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.ResourceReferencesApis> GetLinksToResourced ( global::ApiStudioIO.Api apiInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.ResourceReferencesApis>(apiInstance, global::ApiStudioIO.ResourceReferencesApis.ApiDomainRoleId);
		}
		#endregion
		#region ResourceReferencesApis instance accessors

		/// <summary>
		/// Get any ResourceReferencesApis links between a given Resource and a Api.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.ResourceReferencesApis> GetLinks( global::ApiStudioIO.Resource source, global::ApiStudioIO.Api target )
		{
			global::System.Collections.Generic.List<global::ApiStudioIO.ResourceReferencesApis> outLinks = new global::System.Collections.Generic.List<global::ApiStudioIO.ResourceReferencesApis>();
			global::System.Collections.Generic.IList<global::ApiStudioIO.ResourceReferencesApis> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.ResourceReferencesApis>(source, global::ApiStudioIO.ResourceReferencesApis.ResourceDomainRoleId);
			foreach ( global::ApiStudioIO.ResourceReferencesApis link in links )
			{
				if ( target.Equals(link.Api) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ResourceReferencesApis link between a given Resourceand a Api.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.ResourceReferencesApis GetLink( global::ApiStudioIO.Resource source, global::ApiStudioIO.Api target )
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.ResourceReferencesApis> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.ResourceReferencesApis>(source, global::ApiStudioIO.ResourceReferencesApis.ResourceDomainRoleId);
			foreach ( global::ApiStudioIO.ResourceReferencesApis link in links )
			{
				if ( target.Equals(link.Api) )
				{
					return link;
				}
			}
			return null;
		}

		#endregion
	}
}
namespace ApiStudioIO
{
	/// <summary>
	/// DomainRelationship HttpApiHasHeaderRequest
	/// Description for ApiStudioIO.HttpApiHasHeaderRequest
	/// </summary>
	[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiHasHeaderRequest.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ApiStudioIO.HttpApiHasHeaderRequest.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ApiStudioIO.ApiStudioIODomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e4e82758-72de-402c-a610-fe6df8a9ac1d")]
	public partial class HttpApiHasHeaderRequest : DslModeling::ElementLink
	{
		#region Constructors, domain class Id

		/// <summary>
		/// HttpApiHasHeaderRequest domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe4e82758, 0x72de, 0x402c, 0xa6, 0x10, 0xfe, 0x6d, 0xf8, 0xa9, 0xac, 0x1d);


		/// <summary>
		/// Constructor
		/// Creates a HttpApiHasHeaderRequest link in the same Partition as the given HttpApi
		/// </summary>
		/// <param name="source">HttpApi to use as the source of the relationship.</param>
		/// <param name="target">HttpApiHeaderRequest to use as the target of the relationship.</param>
		public HttpApiHasHeaderRequest(HttpApi source, HttpApiHeaderRequest target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(HttpApiHasHeaderRequest.HttpApiDomainRoleId, source), new DslModeling::RoleAssignment(HttpApiHasHeaderRequest.HttpApiHeaderRequestDomainRoleId, target)}, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HttpApiHasHeaderRequest(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HttpApiHasHeaderRequest(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HttpApiHasHeaderRequest(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HttpApiHasHeaderRequest(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region HttpApi domain role code

		/// <summary>
		/// HttpApi domain role Id.
		/// </summary>
		public static readonly global::System.Guid HttpApiDomainRoleId = new global::System.Guid(0x201c414c, 0xb3c9, 0x49cc, 0x81, 0xad, 0x64, 0xbd, 0x31, 0xa9, 0x52, 0x81);

		/// <summary>
		/// DomainRole HttpApi
		/// Description for ApiStudioIO.HttpApiHasHeaderRequest.HttpApi
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiHasHeaderRequest/HttpApi.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.HttpApiHasHeaderRequest/HttpApi.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "HttpApiHeaderRequests", PropertyDisplayNameKey="ApiStudioIO.HttpApiHasHeaderRequest/HttpApi.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("201c414c-b3c9-49cc-81ad-64bd31a95281")]
		public virtual HttpApi HttpApi
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (HttpApi)DslModeling::DomainRoleInfo.GetRolePlayer(this, HttpApiDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, HttpApiDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access HttpApi of a HttpApiHeaderRequest
		/// <summary>
		/// Gets HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static HttpApi GetHttpApi(HttpApiHeaderRequest element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, HttpApiHeaderRequestDomainRoleId) as HttpApi;
		}

		/// <summary>
		/// Sets HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetHttpApi(HttpApiHeaderRequest element, HttpApi newHttpApi)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, HttpApiHeaderRequestDomainRoleId, newHttpApi);
		}
		#endregion
		#region HttpApiHeaderRequest domain role code

		/// <summary>
		/// HttpApiHeaderRequest domain role Id.
		/// </summary>
		public static readonly global::System.Guid HttpApiHeaderRequestDomainRoleId = new global::System.Guid(0xa53f79d2, 0xb840, 0x44f0, 0x8e, 0x9f, 0xee, 0x8f, 0x4a, 0xf6, 0x36, 0x37);

		/// <summary>
		/// DomainRole HttpApiHeaderRequest
		/// Description for ApiStudioIO.HttpApiHasHeaderRequest.HttpApiHeaderRequest
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiHasHeaderRequest/HttpApiHeaderRequest.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.HttpApiHasHeaderRequest/HttpApiHeaderRequest.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "HttpApi", PropertyDisplayNameKey="ApiStudioIO.HttpApiHasHeaderRequest/HttpApiHeaderRequest.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a53f79d2-b840-44f0-8e9f-ee8f4af63637")]
		public virtual HttpApiHeaderRequest HttpApiHeaderRequest
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (HttpApiHeaderRequest)DslModeling::DomainRoleInfo.GetRolePlayer(this, HttpApiHeaderRequestDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, HttpApiHeaderRequestDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access HttpApiHeaderRequests of a HttpApi
		/// <summary>
		/// Gets a list of HttpApiHeaderRequests.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<HttpApiHeaderRequest> GetHttpApiHeaderRequests(HttpApi element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<HttpApiHeaderRequest>, HttpApiHeaderRequest>(element, HttpApiDomainRoleId);
		}
		#endregion
		#region HttpApi link accessor
		/// <summary>
		/// Get the list of HttpApiHasHeaderRequest links to a HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.HttpApiHasHeaderRequest> GetLinksToHttpApiHeaderRequests ( global::ApiStudioIO.HttpApi httpApiInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasHeaderRequest>(httpApiInstance, global::ApiStudioIO.HttpApiHasHeaderRequest.HttpApiDomainRoleId);
		}
		#endregion
		#region HttpApiHeaderRequest link accessor
		/// <summary>
		/// Get the HttpApiHasHeaderRequest link to a HttpApiHeaderRequest.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.HttpApiHasHeaderRequest GetLinkToHttpApi (global::ApiStudioIO.HttpApiHeaderRequest httpApiHeaderRequestInstance)
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiHasHeaderRequest> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasHeaderRequest>(httpApiHeaderRequestInstance, global::ApiStudioIO.HttpApiHasHeaderRequest.HttpApiHeaderRequestDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of HttpApiHeaderRequest not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region HttpApiHasHeaderRequest instance accessors

		/// <summary>
		/// Get any HttpApiHasHeaderRequest links between a given HttpApi and a HttpApiHeaderRequest.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.HttpApiHasHeaderRequest> GetLinks( global::ApiStudioIO.HttpApi source, global::ApiStudioIO.HttpApiHeaderRequest target )
		{
			global::System.Collections.Generic.List<global::ApiStudioIO.HttpApiHasHeaderRequest> outLinks = new global::System.Collections.Generic.List<global::ApiStudioIO.HttpApiHasHeaderRequest>();
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiHasHeaderRequest> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasHeaderRequest>(source, global::ApiStudioIO.HttpApiHasHeaderRequest.HttpApiDomainRoleId);
			foreach ( global::ApiStudioIO.HttpApiHasHeaderRequest link in links )
			{
				if ( target.Equals(link.HttpApiHeaderRequest) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one HttpApiHasHeaderRequest link between a given HttpApiand a HttpApiHeaderRequest.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.HttpApiHasHeaderRequest GetLink( global::ApiStudioIO.HttpApi source, global::ApiStudioIO.HttpApiHeaderRequest target )
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiHasHeaderRequest> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasHeaderRequest>(source, global::ApiStudioIO.HttpApiHasHeaderRequest.HttpApiDomainRoleId);
			foreach ( global::ApiStudioIO.HttpApiHasHeaderRequest link in links )
			{
				if ( target.Equals(link.HttpApiHeaderRequest) )
				{
					return link;
				}
			}
			return null;
		}

		#endregion
	}
}
namespace ApiStudioIO
{
	/// <summary>
	/// DomainRelationship HttpApiHasHeaderResponse
	/// Description for ApiStudioIO.HttpApiHasHeaderResponse
	/// </summary>
	[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiHasHeaderResponse.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ApiStudioIO.HttpApiHasHeaderResponse.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ApiStudioIO.ApiStudioIODomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("def037d5-1495-4547-8dd6-cb91b92abfa3")]
	public partial class HttpApiHasHeaderResponse : DslModeling::ElementLink
	{
		#region Constructors, domain class Id

		/// <summary>
		/// HttpApiHasHeaderResponse domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdef037d5, 0x1495, 0x4547, 0x8d, 0xd6, 0xcb, 0x91, 0xb9, 0x2a, 0xbf, 0xa3);


		/// <summary>
		/// Constructor
		/// Creates a HttpApiHasHeaderResponse link in the same Partition as the given HttpApi
		/// </summary>
		/// <param name="source">HttpApi to use as the source of the relationship.</param>
		/// <param name="target">HttpApiHeaderResponse to use as the target of the relationship.</param>
		public HttpApiHasHeaderResponse(HttpApi source, HttpApiHeaderResponse target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(HttpApiHasHeaderResponse.HttpApiDomainRoleId, source), new DslModeling::RoleAssignment(HttpApiHasHeaderResponse.HttpApiHeaderResponseDomainRoleId, target)}, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HttpApiHasHeaderResponse(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HttpApiHasHeaderResponse(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HttpApiHasHeaderResponse(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HttpApiHasHeaderResponse(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region HttpApi domain role code

		/// <summary>
		/// HttpApi domain role Id.
		/// </summary>
		public static readonly global::System.Guid HttpApiDomainRoleId = new global::System.Guid(0x3991413f, 0x0c9f, 0x47b0, 0x88, 0x18, 0x9e, 0x77, 0x3b, 0x7f, 0x24, 0x6b);

		/// <summary>
		/// DomainRole HttpApi
		/// Description for ApiStudioIO.HttpApiHasHeaderResponse.HttpApi
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiHasHeaderResponse/HttpApi.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.HttpApiHasHeaderResponse/HttpApi.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "HttpApiHeaderResponses", PropertyDisplayNameKey="ApiStudioIO.HttpApiHasHeaderResponse/HttpApi.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3991413f-0c9f-47b0-8818-9e773b7f246b")]
		public virtual HttpApi HttpApi
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (HttpApi)DslModeling::DomainRoleInfo.GetRolePlayer(this, HttpApiDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, HttpApiDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access HttpApi of a HttpApiHeaderResponse
		/// <summary>
		/// Gets HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static HttpApi GetHttpApi(HttpApiHeaderResponse element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, HttpApiHeaderResponseDomainRoleId) as HttpApi;
		}

		/// <summary>
		/// Sets HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetHttpApi(HttpApiHeaderResponse element, HttpApi newHttpApi)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, HttpApiHeaderResponseDomainRoleId, newHttpApi);
		}
		#endregion
		#region HttpApiHeaderResponse domain role code

		/// <summary>
		/// HttpApiHeaderResponse domain role Id.
		/// </summary>
		public static readonly global::System.Guid HttpApiHeaderResponseDomainRoleId = new global::System.Guid(0xd36478e4, 0x8466, 0x4f46, 0xad, 0x74, 0x3c, 0xd1, 0xdc, 0x1a, 0x0f, 0x35);

		/// <summary>
		/// DomainRole HttpApiHeaderResponse
		/// Description for ApiStudioIO.HttpApiHasHeaderResponse.HttpApiHeaderResponse
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.HttpApiHasHeaderResponse/HttpApiHeaderResponse.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.HttpApiHasHeaderResponse/HttpApiHeaderResponse.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "HttpApi", PropertyDisplayNameKey="ApiStudioIO.HttpApiHasHeaderResponse/HttpApiHeaderResponse.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d36478e4-8466-4f46-ad74-3cd1dc1a0f35")]
		public virtual HttpApiHeaderResponse HttpApiHeaderResponse
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (HttpApiHeaderResponse)DslModeling::DomainRoleInfo.GetRolePlayer(this, HttpApiHeaderResponseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, HttpApiHeaderResponseDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access HttpApiHeaderResponses of a HttpApi
		/// <summary>
		/// Gets a list of HttpApiHeaderResponses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<HttpApiHeaderResponse> GetHttpApiHeaderResponses(HttpApi element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<HttpApiHeaderResponse>, HttpApiHeaderResponse>(element, HttpApiDomainRoleId);
		}
		#endregion
		#region HttpApi link accessor
		/// <summary>
		/// Get the list of HttpApiHasHeaderResponse links to a HttpApi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.HttpApiHasHeaderResponse> GetLinksToHttpApiHeaderResponses ( global::ApiStudioIO.HttpApi httpApiInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasHeaderResponse>(httpApiInstance, global::ApiStudioIO.HttpApiHasHeaderResponse.HttpApiDomainRoleId);
		}
		#endregion
		#region HttpApiHeaderResponse link accessor
		/// <summary>
		/// Get the HttpApiHasHeaderResponse link to a HttpApiHeaderResponse.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.HttpApiHasHeaderResponse GetLinkToHttpApi (global::ApiStudioIO.HttpApiHeaderResponse httpApiHeaderResponseInstance)
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiHasHeaderResponse> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasHeaderResponse>(httpApiHeaderResponseInstance, global::ApiStudioIO.HttpApiHasHeaderResponse.HttpApiHeaderResponseDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of HttpApiHeaderResponse not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region HttpApiHasHeaderResponse instance accessors

		/// <summary>
		/// Get any HttpApiHasHeaderResponse links between a given HttpApi and a HttpApiHeaderResponse.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.HttpApiHasHeaderResponse> GetLinks( global::ApiStudioIO.HttpApi source, global::ApiStudioIO.HttpApiHeaderResponse target )
		{
			global::System.Collections.Generic.List<global::ApiStudioIO.HttpApiHasHeaderResponse> outLinks = new global::System.Collections.Generic.List<global::ApiStudioIO.HttpApiHasHeaderResponse>();
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiHasHeaderResponse> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasHeaderResponse>(source, global::ApiStudioIO.HttpApiHasHeaderResponse.HttpApiDomainRoleId);
			foreach ( global::ApiStudioIO.HttpApiHasHeaderResponse link in links )
			{
				if ( target.Equals(link.HttpApiHeaderResponse) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one HttpApiHasHeaderResponse link between a given HttpApiand a HttpApiHeaderResponse.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.HttpApiHasHeaderResponse GetLink( global::ApiStudioIO.HttpApi source, global::ApiStudioIO.HttpApiHeaderResponse target )
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.HttpApiHasHeaderResponse> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.HttpApiHasHeaderResponse>(source, global::ApiStudioIO.HttpApiHasHeaderResponse.HttpApiDomainRoleId);
			foreach ( global::ApiStudioIO.HttpApiHasHeaderResponse link in links )
			{
				if ( target.Equals(link.HttpApiHeaderResponse) )
				{
					return link;
				}
			}
			return null;
		}

		#endregion
	}
}
namespace ApiStudioIO
{
	/// <summary>
	/// DomainRelationship ApiStudioHasResourced
	/// Description for ApiStudioIO.ApiStudioHasResourced
	/// </summary>
	[DslDesign::DisplayNameResource("ApiStudioIO.ApiStudioHasResourced.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ApiStudioIO.ApiStudioHasResourced.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ApiStudioIO.ApiStudioIODomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ee5b1dbe-25e0-460f-be24-d2c234b79fc1")]
	public partial class ApiStudioHasResourced : DslModeling::ElementLink
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ApiStudioHasResourced domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xee5b1dbe, 0x25e0, 0x460f, 0xbe, 0x24, 0xd2, 0xc2, 0x34, 0xb7, 0x9f, 0xc1);


		/// <summary>
		/// Constructor
		/// Creates a ApiStudioHasResourced link in the same Partition as the given ApiStudio
		/// </summary>
		/// <param name="source">ApiStudio to use as the source of the relationship.</param>
		/// <param name="target">Resource to use as the target of the relationship.</param>
		public ApiStudioHasResourced(ApiStudio source, Resource target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ApiStudioHasResourced.ApiStudioDomainRoleId, source), new DslModeling::RoleAssignment(ApiStudioHasResourced.ResourceDomainRoleId, target)}, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ApiStudioHasResourced(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ApiStudioHasResourced(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ApiStudioHasResourced(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ApiStudioHasResourced(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ApiStudio domain role code

		/// <summary>
		/// ApiStudio domain role Id.
		/// </summary>
		public static readonly global::System.Guid ApiStudioDomainRoleId = new global::System.Guid(0x0837992d, 0x25ad, 0x49e3, 0x9f, 0xec, 0x8d, 0x5d, 0xa6, 0xc1, 0x31, 0x91);

		/// <summary>
		/// DomainRole ApiStudio
		/// Description for ApiStudioIO.ApiStudioHasResourced.ApiStudio
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.ApiStudioHasResourced/ApiStudio.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.ApiStudioHasResourced/ApiStudio.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Resourced", PropertyDisplayNameKey="ApiStudioIO.ApiStudioHasResourced/ApiStudio.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0837992d-25ad-49e3-9fec-8d5da6c13191")]
		public virtual ApiStudio ApiStudio
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ApiStudio)DslModeling::DomainRoleInfo.GetRolePlayer(this, ApiStudioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ApiStudioDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access ApiStudio of a Resource
		/// <summary>
		/// Gets ApiStudio.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ApiStudio GetApiStudio(Resource element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ResourceDomainRoleId) as ApiStudio;
		}

		/// <summary>
		/// Sets ApiStudio.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetApiStudio(Resource element, ApiStudio newApiStudio)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ResourceDomainRoleId, newApiStudio);
		}
		#endregion
		#region Resource domain role code

		/// <summary>
		/// Resource domain role Id.
		/// </summary>
		public static readonly global::System.Guid ResourceDomainRoleId = new global::System.Guid(0x2a98130e, 0xdb8a, 0x42c6, 0xb1, 0x78, 0x12, 0x48, 0x4e, 0xe3, 0xf8, 0xd5);

		/// <summary>
		/// DomainRole Resource
		/// Description for ApiStudioIO.ApiStudioHasResourced.Resource
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.ApiStudioHasResourced/Resource.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.ApiStudioHasResourced/Resource.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ApiStudio", PropertyDisplayNameKey="ApiStudioIO.ApiStudioHasResourced/Resource.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("2a98130e-db8a-42c6-b178-12484ee3f8d5")]
		public virtual Resource Resource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Resource)DslModeling::DomainRoleInfo.GetRolePlayer(this, ResourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ResourceDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access Resourced of a ApiStudio
		/// <summary>
		/// Gets a list of Resourced.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Resource> GetResourced(ApiStudio element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Resource>, Resource>(element, ApiStudioDomainRoleId);
		}
		#endregion
		#region ApiStudio link accessor
		/// <summary>
		/// Get the list of ApiStudioHasResourced links to a ApiStudio.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.ApiStudioHasResourced> GetLinksToResourced ( global::ApiStudioIO.ApiStudio apiStudioInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.ApiStudioHasResourced>(apiStudioInstance, global::ApiStudioIO.ApiStudioHasResourced.ApiStudioDomainRoleId);
		}
		#endregion
		#region Resource link accessor
		/// <summary>
		/// Get the ApiStudioHasResourced link to a Resource.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.ApiStudioHasResourced GetLinkToApiStudio (global::ApiStudioIO.Resource resourceInstance)
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.ApiStudioHasResourced> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.ApiStudioHasResourced>(resourceInstance, global::ApiStudioIO.ApiStudioHasResourced.ResourceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Resource not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ApiStudioHasResourced instance accessors

		/// <summary>
		/// Get any ApiStudioHasResourced links between a given ApiStudio and a Resource.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.ApiStudioHasResourced> GetLinks( global::ApiStudioIO.ApiStudio source, global::ApiStudioIO.Resource target )
		{
			global::System.Collections.Generic.List<global::ApiStudioIO.ApiStudioHasResourced> outLinks = new global::System.Collections.Generic.List<global::ApiStudioIO.ApiStudioHasResourced>();
			global::System.Collections.Generic.IList<global::ApiStudioIO.ApiStudioHasResourced> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.ApiStudioHasResourced>(source, global::ApiStudioIO.ApiStudioHasResourced.ApiStudioDomainRoleId);
			foreach ( global::ApiStudioIO.ApiStudioHasResourced link in links )
			{
				if ( target.Equals(link.Resource) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ApiStudioHasResourced link between a given ApiStudioand a Resource.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.ApiStudioHasResourced GetLink( global::ApiStudioIO.ApiStudio source, global::ApiStudioIO.Resource target )
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.ApiStudioHasResourced> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.ApiStudioHasResourced>(source, global::ApiStudioIO.ApiStudioHasResourced.ApiStudioDomainRoleId);
			foreach ( global::ApiStudioIO.ApiStudioHasResourced link in links )
			{
				if ( target.Equals(link.Resource) )
				{
					return link;
				}
			}
			return null;
		}

		#endregion
	}
}
namespace ApiStudioIO
{
	/// <summary>
	/// DomainRelationship ApiStudioHasApis
	/// Description for ApiStudioIO.ApiStudioHasApis
	/// </summary>
	[DslDesign::DisplayNameResource("ApiStudioIO.ApiStudioHasApis.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ApiStudioIO.ApiStudioHasApis.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ApiStudioIO.ApiStudioIODomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("eded6647-b5c9-4f5c-ba0f-48f5a54e7d64")]
	public partial class ApiStudioHasApis : DslModeling::ElementLink
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ApiStudioHasApis domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xeded6647, 0xb5c9, 0x4f5c, 0xba, 0x0f, 0x48, 0xf5, 0xa5, 0x4e, 0x7d, 0x64);


		/// <summary>
		/// Constructor
		/// Creates a ApiStudioHasApis link in the same Partition as the given ApiStudio
		/// </summary>
		/// <param name="source">ApiStudio to use as the source of the relationship.</param>
		/// <param name="target">Api to use as the target of the relationship.</param>
		public ApiStudioHasApis(ApiStudio source, Api target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ApiStudioHasApis.ApiStudioDomainRoleId, source), new DslModeling::RoleAssignment(ApiStudioHasApis.ApiDomainRoleId, target)}, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ApiStudioHasApis(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ApiStudioHasApis(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ApiStudioHasApis(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ApiStudioHasApis(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ApiStudio domain role code

		/// <summary>
		/// ApiStudio domain role Id.
		/// </summary>
		public static readonly global::System.Guid ApiStudioDomainRoleId = new global::System.Guid(0x794b38ee, 0x0862, 0x4a1f, 0xb7, 0x3a, 0xc0, 0x5f, 0xfc, 0x77, 0xbf, 0x6d);

		/// <summary>
		/// DomainRole ApiStudio
		/// Description for ApiStudioIO.ApiStudioHasApis.ApiStudio
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.ApiStudioHasApis/ApiStudio.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.ApiStudioHasApis/ApiStudio.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Apis", PropertyDisplayNameKey="ApiStudioIO.ApiStudioHasApis/ApiStudio.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("794b38ee-0862-4a1f-b73a-c05ffc77bf6d")]
		public virtual ApiStudio ApiStudio
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ApiStudio)DslModeling::DomainRoleInfo.GetRolePlayer(this, ApiStudioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ApiStudioDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access ApiStudio of a Api
		/// <summary>
		/// Gets ApiStudio.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ApiStudio GetApiStudio(Api element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ApiDomainRoleId) as ApiStudio;
		}

		/// <summary>
		/// Sets ApiStudio.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetApiStudio(Api element, ApiStudio newApiStudio)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ApiDomainRoleId, newApiStudio);
		}
		#endregion
		#region Api domain role code

		/// <summary>
		/// Api domain role Id.
		/// </summary>
		public static readonly global::System.Guid ApiDomainRoleId = new global::System.Guid(0x4c61d465, 0xdc4c, 0x4b48, 0xbc, 0xa0, 0xbc, 0x95, 0xc9, 0xba, 0x30, 0xe9);

		/// <summary>
		/// DomainRole Api
		/// Description for ApiStudioIO.ApiStudioHasApis.Api
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.ApiStudioHasApis/Api.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.ApiStudioHasApis/Api.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ApiStudio", PropertyDisplayNameKey="ApiStudioIO.ApiStudioHasApis/Api.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4c61d465-dc4c-4b48-bca0-bc95c9ba30e9")]
		public virtual Api Api
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Api)DslModeling::DomainRoleInfo.GetRolePlayer(this, ApiDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ApiDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access Apis of a ApiStudio
		/// <summary>
		/// Gets a list of Apis.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Api> GetApis(ApiStudio element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Api>, Api>(element, ApiStudioDomainRoleId);
		}
		#endregion
		#region ApiStudio link accessor
		/// <summary>
		/// Get the list of ApiStudioHasApis links to a ApiStudio.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.ApiStudioHasApis> GetLinksToApis ( global::ApiStudioIO.ApiStudio apiStudioInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.ApiStudioHasApis>(apiStudioInstance, global::ApiStudioIO.ApiStudioHasApis.ApiStudioDomainRoleId);
		}
		#endregion
		#region Api link accessor
		/// <summary>
		/// Get the ApiStudioHasApis link to a Api.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.ApiStudioHasApis GetLinkToApiStudio (global::ApiStudioIO.Api apiInstance)
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.ApiStudioHasApis> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.ApiStudioHasApis>(apiInstance, global::ApiStudioIO.ApiStudioHasApis.ApiDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Api not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ApiStudioHasApis instance accessors

		/// <summary>
		/// Get any ApiStudioHasApis links between a given ApiStudio and a Api.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.ApiStudioHasApis> GetLinks( global::ApiStudioIO.ApiStudio source, global::ApiStudioIO.Api target )
		{
			global::System.Collections.Generic.List<global::ApiStudioIO.ApiStudioHasApis> outLinks = new global::System.Collections.Generic.List<global::ApiStudioIO.ApiStudioHasApis>();
			global::System.Collections.Generic.IList<global::ApiStudioIO.ApiStudioHasApis> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.ApiStudioHasApis>(source, global::ApiStudioIO.ApiStudioHasApis.ApiStudioDomainRoleId);
			foreach ( global::ApiStudioIO.ApiStudioHasApis link in links )
			{
				if ( target.Equals(link.Api) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ApiStudioHasApis link between a given ApiStudioand a Api.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.ApiStudioHasApis GetLink( global::ApiStudioIO.ApiStudio source, global::ApiStudioIO.Api target )
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.ApiStudioHasApis> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.ApiStudioHasApis>(source, global::ApiStudioIO.ApiStudioHasApis.ApiStudioDomainRoleId);
			foreach ( global::ApiStudioIO.ApiStudioHasApis link in links )
			{
				if ( target.Equals(link.Api) )
				{
					return link;
				}
			}
			return null;
		}

		#endregion
	}
}
namespace ApiStudioIO
{
	/// <summary>
	/// DomainRelationship ApiStudioHasDataModeled
	/// Description for ApiStudioIO.ApiStudioHasDataModeled
	/// </summary>
	[DslDesign::DisplayNameResource("ApiStudioIO.ApiStudioHasDataModeled.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ApiStudioIO.ApiStudioHasDataModeled.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ApiStudioIO.ApiStudioIODomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("cefe5767-c48f-4781-a0ad-320070d4d2af")]
	public partial class ApiStudioHasDataModeled : DslModeling::ElementLink
	{
		#region Constructors, domain class Id

		/// <summary>
		/// ApiStudioHasDataModeled domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcefe5767, 0xc48f, 0x4781, 0xa0, 0xad, 0x32, 0x00, 0x70, 0xd4, 0xd2, 0xaf);


		/// <summary>
		/// Constructor
		/// Creates a ApiStudioHasDataModeled link in the same Partition as the given ApiStudio
		/// </summary>
		/// <param name="source">ApiStudio to use as the source of the relationship.</param>
		/// <param name="target">DataModel to use as the target of the relationship.</param>
		public ApiStudioHasDataModeled(ApiStudio source, DataModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ApiStudioHasDataModeled.ApiStudioDomainRoleId, source), new DslModeling::RoleAssignment(ApiStudioHasDataModeled.DataModelDomainRoleId, target)}, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ApiStudioHasDataModeled(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ApiStudioHasDataModeled(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ApiStudioHasDataModeled(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ApiStudioHasDataModeled(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ApiStudio domain role code

		/// <summary>
		/// ApiStudio domain role Id.
		/// </summary>
		public static readonly global::System.Guid ApiStudioDomainRoleId = new global::System.Guid(0x8816db77, 0x5b8e, 0x405b, 0x8a, 0x02, 0x3a, 0x4c, 0x7f, 0x48, 0x0f, 0xd5);

		/// <summary>
		/// DomainRole ApiStudio
		/// Description for ApiStudioIO.ApiStudioHasDataModeled.ApiStudio
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.ApiStudioHasDataModeled/ApiStudio.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.ApiStudioHasDataModeled/ApiStudio.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DataModeled", PropertyDisplayNameKey="ApiStudioIO.ApiStudioHasDataModeled/ApiStudio.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8816db77-5b8e-405b-8a02-3a4c7f480fd5")]
		public virtual ApiStudio ApiStudio
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ApiStudio)DslModeling::DomainRoleInfo.GetRolePlayer(this, ApiStudioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ApiStudioDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access ApiStudio of a DataModel
		/// <summary>
		/// Gets ApiStudio.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ApiStudio GetApiStudio(DataModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DataModelDomainRoleId) as ApiStudio;
		}

		/// <summary>
		/// Sets ApiStudio.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetApiStudio(DataModel element, ApiStudio newApiStudio)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DataModelDomainRoleId, newApiStudio);
		}
		#endregion
		#region DataModel domain role code

		/// <summary>
		/// DataModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataModelDomainRoleId = new global::System.Guid(0xa8765d18, 0xf408, 0x4aff, 0x93, 0x8b, 0x85, 0x63, 0xe8, 0xf2, 0x1a, 0x4f);

		/// <summary>
		/// DomainRole DataModel
		/// Description for ApiStudioIO.ApiStudioHasDataModeled.DataModel
		/// </summary>
		[DslDesign::DisplayNameResource("ApiStudioIO.ApiStudioHasDataModeled/DataModel.DisplayName", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ApiStudioIO.ApiStudioHasDataModeled/DataModel.Description", typeof(global::ApiStudioIO.ApiStudioIODomainModel), "ApiStudioIO.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ApiStudio", PropertyDisplayNameKey="ApiStudioIO.ApiStudioHasDataModeled/DataModel.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a8765d18-f408-4aff-938b-8563e8f21a4f")]
		public virtual DataModel DataModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataModelDomainRoleId, value);
			}
		}

		#endregion
		#region Static methods to access DataModeled of a ApiStudio
		/// <summary>
		/// Gets a list of DataModeled.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DataModel> GetDataModeled(ApiStudio element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DataModel>, DataModel>(element, ApiStudioDomainRoleId);
		}
		#endregion
		#region ApiStudio link accessor
		/// <summary>
		/// Get the list of ApiStudioHasDataModeled links to a ApiStudio.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.ApiStudioHasDataModeled> GetLinksToDataModeled ( global::ApiStudioIO.ApiStudio apiStudioInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.ApiStudioHasDataModeled>(apiStudioInstance, global::ApiStudioIO.ApiStudioHasDataModeled.ApiStudioDomainRoleId);
		}
		#endregion
		#region DataModel link accessor
		/// <summary>
		/// Get the ApiStudioHasDataModeled link to a DataModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.ApiStudioHasDataModeled GetLinkToApiStudio (global::ApiStudioIO.DataModel dataModelInstance)
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.ApiStudioHasDataModeled> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.ApiStudioHasDataModeled>(dataModelInstance, global::ApiStudioIO.ApiStudioHasDataModeled.DataModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DataModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ApiStudioHasDataModeled instance accessors

		/// <summary>
		/// Get any ApiStudioHasDataModeled links between a given ApiStudio and a DataModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ApiStudioIO.ApiStudioHasDataModeled> GetLinks( global::ApiStudioIO.ApiStudio source, global::ApiStudioIO.DataModel target )
		{
			global::System.Collections.Generic.List<global::ApiStudioIO.ApiStudioHasDataModeled> outLinks = new global::System.Collections.Generic.List<global::ApiStudioIO.ApiStudioHasDataModeled>();
			global::System.Collections.Generic.IList<global::ApiStudioIO.ApiStudioHasDataModeled> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.ApiStudioHasDataModeled>(source, global::ApiStudioIO.ApiStudioHasDataModeled.ApiStudioDomainRoleId);
			foreach ( global::ApiStudioIO.ApiStudioHasDataModeled link in links )
			{
				if ( target.Equals(link.DataModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ApiStudioHasDataModeled link between a given ApiStudioand a DataModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ApiStudioIO.ApiStudioHasDataModeled GetLink( global::ApiStudioIO.ApiStudio source, global::ApiStudioIO.DataModel target )
		{
			global::System.Collections.Generic.IList<global::ApiStudioIO.ApiStudioHasDataModeled> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ApiStudioIO.ApiStudioHasDataModeled>(source, global::ApiStudioIO.ApiStudioHasDataModeled.ApiStudioDomainRoleId);
			foreach ( global::ApiStudioIO.ApiStudioHasDataModeled link in links )
			{
				if ( target.Equals(link.DataModel) )
				{
					return link;
				}
			}
			return null;
		}

		#endregion
	}
}
