// The MIT License (MIT)
//
// Copyright (c) 2022 Andrew Butson
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

using System.ComponentModel;
using ApiStudioIO.Common.Models.Http;
using Microsoft.VisualStudio.Modeling;

namespace ApiStudioIO
{
    internal static class DomainModelHelpers
    {
        internal static HttpApiHeaderRequest ToHttpApiHeaderRequest(this HttpResourceHeaderRequest propertyHttpApi,
            Store store)
        {
            return new HttpApiHeaderRequest(store)
            {
                Name = propertyHttpApi.Name,
                Description = propertyHttpApi.Description,
                IsRequired = propertyHttpApi.IsRequired,
                AllowEmptyValue = propertyHttpApi.AllowEmptyValue,
                IsAutoGenerated = propertyHttpApi.IsAutoGenerated
            };
        }

        internal static HttpApiHeaderResponse ToHttpApiHeaderResponse(this HttpResourceHeaderResponse propertyHttpApi,
            Store store)
        {
            return new HttpApiHeaderResponse(store)
            {
                Name = propertyHttpApi.Name,
                Description = propertyHttpApi.Description,
                IsRequired = propertyHttpApi.IsRequired,
                AllowEmptyValue = propertyHttpApi.AllowEmptyValue,
                IncludeOn = propertyHttpApi.IncludeOn.ToHttpApiHeaderResponseOnTypes(),
                IsAutoGenerated = propertyHttpApi.IsAutoGenerated
            };
        }

        internal static HttpApiMediaTypeRequest ToHttpApiMediaTypeRequest(
            this HttpResourceMediaTypeRequest propertyHttpApi, Store store)
        {
            return new HttpApiMediaTypeRequest(store)
            {
                DiscreteType = propertyHttpApi.DiscreteTypeName,
                SubType = propertyHttpApi.SubType
            };
        }

        internal static HttpApiMediaTypeResponse ToHttpApiMediaTypeResponse(
            this HttpResourceMediaTypeResponse propertyHttpApi, Store store)
        {
            return new HttpApiMediaTypeResponse(store)
            {
                DiscreteType = propertyHttpApi.DiscreteTypeName,
                SubType = propertyHttpApi.SubType
            };
        }

        internal static HttpApiParameter ToHttpApiParameter(this HttpResourceParameter propertyHttpApi, Store store)
        {
            return new HttpApiParameter(store)
            {
                Identifier = propertyHttpApi.Identifier,
                DataType = propertyHttpApi.DataType,
                Description = propertyHttpApi.Description,
                FromType = propertyHttpApi.FromType.ToHttpApiParameterTypes(),
                IsRequired = propertyHttpApi.IsRequired,
                IsAutoGenerated = propertyHttpApi.IsAutoGenerated
            };
        }

        internal static HttpApiResponseStatusCode ToHttpApiResponseStatusCode(
            this HttpResourceResponseStatusCode propertyHttpApi, Store store)
        {
            return new HttpApiResponseStatusCode(store)
            {
                HttpStatus = propertyHttpApi.HttpStatus
            };
        }


        internal static HttpApiParameterTypes ToHttpApiParameterTypes(
            this HttpTypeParameterLocation httpTypeParameterLocation)
        {
            switch (httpTypeParameterLocation)
            {
                case HttpTypeParameterLocation.Body: return HttpApiParameterTypes.Body;
                case HttpTypeParameterLocation.Query: return HttpApiParameterTypes.Query;
                case HttpTypeParameterLocation.Path: return HttpApiParameterTypes.Path;

                default:
                    throw new InvalidEnumArgumentException(nameof(httpTypeParameterLocation),
                        (int)httpTypeParameterLocation, typeof(HttpTypeParameterLocation));
            }
        }

        internal static HttpApiHeaderResponseOnTypes ToHttpApiHeaderResponseOnTypes(
            this HttpTypeHeaderOnResponse httpTypeHeaderOnResponse)
        {
            switch (httpTypeHeaderOnResponse)
            {
                case HttpTypeHeaderOnResponse.OnAlways: return HttpApiHeaderResponseOnTypes.OnAlways;
                case HttpTypeHeaderOnResponse.OnInformation: return HttpApiHeaderResponseOnTypes.OnInformation;
                case HttpTypeHeaderOnResponse.OnSuccess: return HttpApiHeaderResponseOnTypes.OnSuccess;
                case HttpTypeHeaderOnResponse.OnRedirection: return HttpApiHeaderResponseOnTypes.OnRedirection;
                case HttpTypeHeaderOnResponse.OnClientError: return HttpApiHeaderResponseOnTypes.OnClientError;
                case HttpTypeHeaderOnResponse.OnServerError: return HttpApiHeaderResponseOnTypes.OnServerError;

                default:
                    throw new InvalidEnumArgumentException(nameof(httpTypeHeaderOnResponse),
                        (int)httpTypeHeaderOnResponse, typeof(HttpTypeHeaderOnResponse));
            }
        }
    }
}