// The MIT License (MIT)
//
// Copyright (c) 2022 Andrew Butson
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

using System.Collections.Generic;
using System.Linq;
using ApiStudioIO.Common.Models.Http;
using ApiStudioIO.VsOptions.ConfigurationV1;

namespace ApiStudioIO.HttpApiDefaults
{
    internal static class HttpApiHeaderExtension
    {
        internal static HttpApi WithDefaultHeaders(this HttpApi httpApi)
        {
            ApiStudioUserSettingsStore.Instance.VsOptionStoreLoad(); //Load vs-options
            ClearAutoGeneratedDefaults(httpApi);
            CreateDefaultRequestHeader(httpApi);
            CreateDefaultResponseHeader(httpApi);

            return httpApi;
        }

        private static void ClearAutoGeneratedDefaults(HttpApi httpApi)
        {
            using (var t = httpApi.Store.TransactionManager.BeginTransaction(
                       "HttpApiHeaderExtension.ClearAutoGeneratedDefaults"))
            {
                httpApi?.HttpApiHeaderRequests
                    .Where(x => x.IsAutoGenerated)
                    .ToList()
                    .ForEach(x => httpApi.HttpApiHeaderRequests.Remove(x));

                httpApi?.HttpApiHeaderResponses
                    .Where(x => x.IsAutoGenerated)
                    .ToList()
                    .ForEach(x => httpApi.HttpApiHeaderResponses.Remove(x));

                t.Commit();
            }
        }

        private static void CreateDefaultRequestHeader(HttpApi httpApi)
        {
            var managedList = new List<HttpResourceHeaderRequest>();

            foreach (var headersRequest in ApiStudioUserSettingsStore.Instance.Data.DefaultHeaders.Request.Values)
                managedList.Add(new HttpResourceHeaderRequest
                {
                    Name = headersRequest.Name,
                    Description = headersRequest.Description,
                    IsRequired = headersRequest.IsRequired,
                    AllowEmptyValue = headersRequest.AllowEmptyValue,
                    IsAutoGenerated = true
                });

            ApiStudioComponentTransactionManager.Save(httpApi, managedList);
        }

        private static void CreateDefaultResponseHeader(HttpApi httpApi)
        {
            var managedList = new List<HttpResourceHeaderResponse>();

            managedList.AddRange(AddResponseHeaderLocation(httpApi));

            foreach (var headersResponse in ApiStudioUserSettingsStore.Instance.Data.DefaultHeaders.Response.Values)
                managedList.Add(new HttpResourceHeaderResponse
                {
                    Name = headersResponse.Name,
                    Description = headersResponse.Description,
                    IsRequired = headersResponse.IsRequired,
                    AllowEmptyValue = headersResponse.AllowEmptyValue,
                    IsAutoGenerated = true,
                    IncludeOn = headersResponse.IncludeOn
                });

            ApiStudioComponentTransactionManager.Save(httpApi, managedList);
        }

        private static List<HttpResourceHeaderResponse> AddResponseHeaderLocation(HttpApi httpApi)
        {
            var managedList = new List<HttpResourceHeaderResponse>();

            //  201 (Created) New resource created @ location
            //  301 (Moved Permanently) and 302(Found) don't change the method most of the time, though older user-agents may (so you basically don't know).
            //  303 (See Also) responses always lead to the use of a GET method.
            //  307 (Temporary Redirect) and 308(Permanent Redirect) don't change the method used in the original request.
            int[] validLocation = { 201, 301, 302, 303, 307 };
            if (httpApi.ResponseStatusCodes.Select(x => x.HttpStatus).Intersect(validLocation).Any())
                managedList.Add(new HttpResourceHeaderResponse
                {
                    Name = "Location",
                    Description =
                        "The Location response header indicates the URL to redirect a page to. It only provides a meaning when served with a 3xx (redirection) or 201 (created) status response. In cases of resource creation (201), it indicates the URL to the newly created resource.",
                    IsRequired = true,
                    AllowEmptyValue = false,
                    IsAutoGenerated = true,
                    IncludeOn = HttpTypeHeaderOnResponse.OnSuccess
                });
            return managedList;
        }
    }
}